{
  "version": 3,
  "sources": ["../sdk/src/index.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-explicit-any */\ninterface Pathing {\n    publicKey: string | null;\n    verificationError: boolean;\n\n    init(): void;\n    track(type: string, payload: Record<string, any>): Promise<any>;\n}\n\nconst pathing: Pathing = {\n    publicKey: null,\n    verificationError: false,\n\n    init() {\n        const scripts = document.querySelectorAll(\"script[pathing-api-key]\");\n        if (scripts.length === 0) {\n            console.error(\n                \"Pathing: No script tag with pathing-api-key attribute found\"\n            );\n            return;\n        }\n\n        this.publicKey = scripts[0].getAttribute(\"pathing-api-key\");\n        if (!this.publicKey) {\n            console.error(\"Pathing: Public key is required\");\n            return;\n        }\n\n        this.track(\"pageview\", {\n            path: window.location.pathname,\n            referrer: document.referrer || null,\n            title: document.title,\n        });\n    },\n\n    async track(type, payload) {\n        if (!this.publicKey) {\n            console.error(\n                \"Pathing: No public key available for tracking events\"\n            );\n            return { success: false, error: \"No public key provided\" };\n        }\n\n        if (this.verificationError) {\n            console.warn(\"Pathing: Domain not verified. Tracking disabled.\");\n            return {\n                success: false,\n                error: \"Domain not verified. Please verify your domain ownership.\",\n            };\n        }\n\n        try {\n            const res = await fetch(\"/api/collect\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"X-Pathing-API-Key\": this.publicKey,\n                },\n                body: JSON.stringify({ type, payload }),\n            });\n\n            const data = await res.json();\n\n            if (!data.success && data.error?.includes(\"not verified\")) {\n                this.verificationError = true;\n                console.warn(\"Pathing: \" + data.error);\n            }\n\n            return data;\n        } catch (error) {\n            console.error(\"Pathing: Error tracking event\", error);\n            return { success: false, error: \"Failed to track event\" };\n        }\n    },\n};\n\n// Auto-init when script loads\nif (typeof window !== \"undefined\") {\n    (window as any).pathing = pathing;\n\n    if (document.readyState === \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", () => pathing.init());\n    } else {\n        pathing.init();\n    }\n}\n"],
  "mappings": "mBASA,IAAMA,EAAmB,CACrB,UAAW,KACX,kBAAmB,GAEnB,MAAO,CACH,IAAMC,EAAU,SAAS,iBAAiB,yBAAyB,EACnE,GAAIA,EAAQ,SAAW,EAAG,CACtB,QAAQ,MACJ,6DACJ,EACA,MACJ,CAGA,GADA,KAAK,UAAYA,EAAQ,CAAC,EAAE,aAAa,iBAAiB,EACtD,CAAC,KAAK,UAAW,CACjB,QAAQ,MAAM,iCAAiC,EAC/C,MACJ,CAEA,KAAK,MAAM,WAAY,CACnB,KAAM,OAAO,SAAS,SACtB,SAAU,SAAS,UAAY,KAC/B,MAAO,SAAS,KACpB,CAAC,CACL,EAEA,MAAM,MAAMC,EAAMC,EAAS,CACvB,GAAI,CAAC,KAAK,UACN,eAAQ,MACJ,sDACJ,EACO,CAAE,QAAS,GAAO,MAAO,wBAAyB,EAG7D,GAAI,KAAK,kBACL,eAAQ,KAAK,kDAAkD,EACxD,CACH,QAAS,GACT,MAAO,2DACX,EAGJ,GAAI,CAUA,IAAMC,EAAO,MATD,MAAM,MAAM,eAAgB,CACpC,OAAQ,OACR,QAAS,CACL,eAAgB,mBAChB,oBAAqB,KAAK,SAC9B,EACA,KAAM,KAAK,UAAU,CAAE,KAAAF,EAAM,QAAAC,CAAQ,CAAC,CAC1C,CAAC,GAEsB,KAAK,EAE5B,MAAI,CAACC,EAAK,SAAWA,EAAK,OAAO,SAAS,cAAc,IACpD,KAAK,kBAAoB,GACzB,QAAQ,KAAK,YAAcA,EAAK,KAAK,GAGlCA,CACX,OAASC,EAAO,CACZ,eAAQ,MAAM,gCAAiCA,CAAK,EAC7C,CAAE,QAAS,GAAO,MAAO,uBAAwB,CAC5D,CACJ,CACJ,EAGI,OAAO,OAAW,MACjB,OAAe,QAAUL,EAEtB,SAAS,aAAe,UACxB,SAAS,iBAAiB,mBAAoB,IAAMA,EAAQ,KAAK,CAAC,EAElEA,EAAQ,KAAK",
  "names": ["pathing", "scripts", "type", "payload", "data", "error"]
}
