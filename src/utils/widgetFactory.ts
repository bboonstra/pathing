import { v4 as uuidv4 } from "uuid";
import {
    WidgetConfig,
    WidgetType,
    WidgetLayout,
    EventData,
} from "@/types/widgets";

/**
 * Creates a new widget configuration
 */
export function createWidget(
    type: WidgetType,
    title: string,
    layout: WidgetLayout,
    settings: Record<string, unknown> = {}
): WidgetConfig {
    const now = new Date().toISOString();

    return {
        id: uuidv4(),
        type,
        title,
        layout,
        settings,
        dateAdded: now,
        dateUpdated: now,
    };
}

/**
 * Generates insight widgets based on event data patterns
 */
export function generateInsightWidgets(events: EventData[]): WidgetConfig[] {
    const insights: WidgetConfig[] = [];

    // Only generate insights if we have enough data
    if (events.length < 10) {
        return insights;
    }

    // Example: Detect if there are multiple conversion events
    const conversionEvents = events.filter(
        (e) =>
            e.type && (e.type === "conversion" || e.type.includes("purchase"))
    );
    if (conversionEvents.length >= 3) {
        insights.push(
            createWidget(
                "conversionMetrics",
                "Conversion Metrics",
                { i: `insight-${uuidv4()}`, x: 0, y: 0, w: 2, h: 1 },
                {
                    timeFrame: "30d",
                    isAutoGenerated: true,
                    insightType: "conversion",
                }
            )
        );
    }

    // Example: Detect if there are many referrers
    const referrers = new Set();
    events.forEach((event) => {
        if (event.payload?.referrer) {
            referrers.add(event.payload.referrer);
        }
    });

    if (referrers.size >= 3) {
        insights.push(
            createWidget(
                "topReferrers",
                "Top Referrers",
                { i: `insight-${uuidv4()}`, x: 0, y: 0, w: 2, h: 2 },
                {
                    timeFrame: "7d",
                    isAutoGenerated: true,
                    displayOptions: {
                        maxItems: 5,
                        chartType: "pie",
                    },
                }
            )
        );
    }

    return insights;
}

/**
 * Analyzes events for correlations and patterns
 */
export function analyzeEventPatterns(events: EventData[]): {
    [key: string]: unknown;
} {
    const patterns: { [key: string]: unknown } = {};

    if (events.length === 0) return patterns;

    // Calculate average events per day
    const dates = events.map((e) => new Date(e.created_at).toDateString());
    const uniqueDates = new Set(dates);
    patterns.averageEventsPerDay =
        events.length / Math.max(1, uniqueDates.size);

    // Calculate most active hours
    const hourCounts: Record<string, number> = {};
    events.forEach((event) => {
        const hour = new Date(event.created_at).getHours();
        hourCounts[hour] = (hourCounts[hour] || 0) + 1;
    });

    const sortedHours = Object.entries(hourCounts)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 3)
        .map(([hour]) => parseInt(hour));

    patterns.mostActiveHours = sortedHours;

    return patterns;
}

export default {
    createWidget,
    generateInsightWidgets,
    analyzeEventPatterns,
};
