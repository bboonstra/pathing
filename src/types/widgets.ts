import {
    TimeFrame,
    EventData as ChartEventData,
} from "@/components/EventTimelineChart";

// Basic layout information for widgets
export interface WidgetLayout {
    i: string; // Unique identifier
    x: number; // Grid x position
    y: number; // Grid y position
    w: number; // Width in grid units
    h: number; // Height in grid units
    minW?: number; // Minimum width
    maxW?: number; // Maximum width
    minH?: number; // Minimum height
    maxH?: number; // Maximum height
    static?: boolean; // Whether widget is movable
}

// Widget configuration saved in database
export interface WidgetConfig {
    id: string;
    type: WidgetType;
    title: string;
    layout: WidgetLayout;
    settings: WidgetSettings;
    isArchived?: boolean;
    isAutoGenerated?: boolean;
    dateAdded: string;
    dateUpdated: string;
}

// All possible widget types
export type WidgetType =
    | "timeline"
    | "eventCount"
    | "uniquePages"
    | "recentEvents"
    | "deviceDistribution"
    | "topReferrers"
    | "pageVisits"
    | "conversionMetrics"
    | "customInsight";

// Settings specific to each widget type
export type WidgetSettings = {
    timeFrame?: TimeFrame;
    refreshInterval?: number;
    colorScheme?: string;
    dataFilters?: {
        eventTypes?: string[];
        pathPatterns?: string[];
        excludePatterns?: string[];
    };
    displayOptions?: {
        showLabels?: boolean;
        showLegend?: boolean;
        showGrid?: boolean;
        maxItems?: number;
        chartType?: "line" | "bar" | "pie" | "area";
    };
    [key: string]: unknown;
};

// Use the EventData type from EventTimelineChart component
export type EventData = ChartEventData;

// Dashboard configuration
export interface DashboardConfig {
    id: string;
    domainId: string;
    name: string;
    layout: {
        columns: number; // 2-4 columns
        rowHeight: number;
        containerPadding: [number, number];
        margin: [number, number];
    };
    widgets: WidgetConfig[];
    suggestedWidgets?: WidgetConfig[];
    dateCreated: string;
    dateUpdated: string;
}

// Props interface for widget components
export interface WidgetProps {
    config: WidgetConfig;
    domainId: string;
    events: EventData[];
    isLoading: boolean;
    onSettingsChange: (widgetId: string, newSettings: WidgetSettings) => void;
}

// Widget data provider interface
export interface WidgetDataProvider {
    getWidgetData: (
        config: WidgetConfig,
        domainId: string,
        events: EventData[]
    ) => unknown;
}
